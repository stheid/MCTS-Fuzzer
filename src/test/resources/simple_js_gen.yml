gen:
  - 'genStmt'

# generateStatement
# true is || with stmtDepth>=maxStmtDepth
genStmt[i<6]:
  - '[i+=1] true zero genExpr'
  - '[i+=1] true one' # break
  - '[i+=1] true two' # continue
  - '[i+=1] true three genReturn'
  - '[i+=1] true four genExpr' # throw
  - '[i+=1] true five genIdent' # var
  - '[i+=1] true six' # empty
  - '[i+=1] false zero genIf'
  - '[i+=1] false one genFor'
  - '[i+=1] false two genExpr genBlock' # while
  - '[i+=1] false three genNameFunc'
  - '[i+=1] false four genExpr genCases' # switch
  - '[i+=1] false five genBlock genIdent genBlock' # try catch
  - '[i+=1] false six genBlock'

genStmt:
  - 'zero genExpr'
  - 'one' # break
  - 'two' # continue
  - 'three genReturn'
  - 'four genExpr' # throw
  - 'five genIdent' # var
  - 'six' # empty

# generateExpression
# true is || with exprDepth>=maxExprDepth
genExpr[j<10]:
  '[j+=1] true zero genLit': 8
  '[j+=1] true one genIdent': 8
  '[j+=1] false zero genBinary_int genExpr genExpr': 2 # binary
  '[j+=1] false one genUnary_int genExpr': 2 # unary
  '[j+=1] false two genExpr genExpr genExpr': 2 # ternary
  '[j+=1] false three genExpr mean3Expr bool': 2 # call
  '[j+=1] false four genFunc': 2
  '[j+=1] false five genExpr genIdent': 2 # prop
  '[j+=1] false six genExpr genExpr': 2 # idx
  '[j+=1] false seven mean3Ident true genBlock': 1 # arrowfunc
  '[j+=1] false seven mean3Ident false genExpr': 1 # arrowfunc

genExpr:
  - 'zero genLit'
  - 'one genIdent'

genReturn:
  - 'true'
  - 'false genExpr'

genIdent[_k==0]:
  - '[_k+=1] genIdent_int26'
genIdent[_k==1]:
  - '[_k+=1] true genIdent_int26'
  - 'false'
genIdent[1 < _k < 100]:
  - '[_k+=1] true genIdent_int26'
  - 'false genIdent_int100'

genIdent[_k==100]:
  - 'genIdent_int100'

genIf:
  - 'genExpr genBlock true genBlock'
  - 'genExpr genBlock false'

genFor:
  - 'genForExpr genForExpr genForExpr genBlock'

genForExpr:
  - 'true genExpr'
  - 'false'

genNameFunc:
  - 'genIdent genFunc'

genFunc:
  - 'mean5genIdent genBlock'

# from scipy.stats import geom
# from itertools import repeat
# def gen(nts, mean=10, offset=0):
#    for i in range(1, mean*2+1):
#        print(f'\'_{i}geo{mean} {" ".join(repeat(nts,i+offset))}\': {geom(1/mean).pmf(i):.4f}')
# gen('genIdent',5)

mean5genIdent:
  - '_1geo5 genIdent'

genBlock:
  - '_1geo4 genStmt'


# gen('genExpr genBlock',2)
genCases:
  - '_1geo2 genExpr genBlock'

genLit[j<10]:
  '[j+=1] true true mean3Expr': 1
  '[j+=1] true false mean3Object': 1
  'false nonNestingLit': 2

genLit[j==10]:
  - 'nonNestingLit'

nonNestingLit:
  - 'zero getLit_int'
  - 'one bool'
  - 'two asciiStr'
  - 'three'
  - 'four'
  - 'five'

# gen('byte',10)
asciiStr:
  - '_1geo10 byte'


mean3Expr:
  - '_1geo3 genExpr'
mean3Ident:
  - '_1geo3 genIdent'

mean3Object:
  - '_1geo3 genIdent genExpr'

_1geo2:
  - '"\x84\xb4\x45\xfc\x40\xc3\x82\x44"'
_1geo3:
  - '"\x78\x32\xd3\x00\x27\xce\x46\x5c"'
_1geo4:
  - '"\xdd\x66\xc2\x10\x96\x31\x4c\x6a"'
_1geo5:
  - '"\xc5\xa6\x44\x68\x45\xfb\xe3\x6a"'
_1geo10:
  - '"\x3f\xba\x65\x80\x94\xd7\xd3\xa7"'

bool:
  - 'true'
  - 'false'

true:
  - '"\x01"'

false:
  - '"\x00"'

byte:
  - '"\x00" . "\x7F"'

genBinary_int:
  - '"\x00\x00\x00" int36'
int36:
  - '"\x00" . "\x24"'

genUnary_int:
  - '"\x00\x00\x00" int8'
int8:
  - '"\x00" . "\x07"'

genIdent_int26:
  - '"\x00\x00\x00" int26'
int26:
  - '"\x00" . "\x1a"'

genIdent_int100:
  - '"\x00\x00\x00" int100'
int100:
  - '"\x00" . "\x64"'

getLit_int:
  - '"\x00\x00\x00" int255'
int255:
  - '"\x00" . "\xff"'

zero:
  - '"\x00\x00\x00\x00"'
one:
  - '"\x01\x00\x00\x00"'
two:
  - '"\x02\x00\x00\x00"'
three:
  - '"\x03\x00\x00\x00"'
four:
  - '"\x04\x00\x00\x00"'
five:
  - '"\x05\x00\x00\x00"'
six:
  - '"\x06\x00\x00\x00"'
seven:
  - '"\x07\x00\x00\x00"'