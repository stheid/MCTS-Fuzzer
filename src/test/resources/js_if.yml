gen:
- 'genStmt'

# generateStatement
genStmt[i<5]:
  - '[i+=1] false zero genIf'
genStmt:
  - 'six' # empty

# generateIfStatement
genIf:
  - 'genExpr genBlock false'

# generateBlock
genBlock:
  - '_1geo4 genStmt'
# generateExpression
genExpr[j<9]:
  '[j+=1] true zero genLit': 2
  '[j+=1] true one genIdent': 8
  '[j+=1] false five genExpr genIdent': 2 # prop
genExpr:
  - 'zero genLit'
  - 'one genIdent'

# generateIdentNode
genIdent[_k==0]:
  - '[_k+=1] genInt'
genIdent[_k==1]:
  - '[_k+=1] true genInt'
  - 'false'
genIdent[1 < _k < 100]:
  - '[_k+=1] true genInt'
  - 'false genInt'
genIdent:
  - 'genInt'

# generateLiteralNode
genLit[j<9]:
  - 'false nonNestingLit'
genLit[j==9]:
  - 'nonNestingLit'
nonNestingLit:
  - 'zero genInt'
  - 'one bool'
  - 'two asciiStr'
  - 'three'
  - 'four'
  - 'five'
asciiStr:
  - '_1geo10 byte'


_1geo4:
  - '"\xdd\x66\xc2\x10\x96\x31\x4c\x6a"'
_1geo10:
  - '"\x3f\xba\x65\x80\x94\xd7\xd3\xa7"'

bool:
  - 'true'
  - 'false'

true:
  - '"\x01"'

false:
  - '"\x00"'

byte:
  - '"\x00" . "\x7F"'

genInt:
  - 'int "\x00\x00\x00"'
int:
  - '"\x00" . "\x63"'

zero:
  - '"\x00\x00\x00\x00"'
one:
  - '"\x01\x00\x00\x00"'
two:
  - '"\x02\x00\x00\x00"'
three:
  - '"\x03\x00\x00\x00"'
four:
  - '"\x04\x00\x00\x00"'
five:
  - '"\x05\x00\x00\x00"'
six:
  - '"\x06\x00\x00\x00"'